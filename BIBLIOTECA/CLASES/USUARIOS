from autores import Paises  # Se asume que la clase Paises está definida en el módulo autores
import re
from rut_chile import rut_chile  # Se asume que el módulo rut_chile tiene funciones para validar RUT

# Clase Usuario que hereda de Paises
class Usuario(Paises):  # Herencia: Usuario hereda de la clase Paises
    def __init__(self, id_usuario, nombre_usuario, correo_usuario, telefono_usuario, rut_usuario, codigo_pais, habilitado, id_tipo_usuario, fecha_creacion):
        super().__init__(codigo_pais)  # Herencia de Paises: Llama al constructor de la clase base Paises
        # Encapsulación: Atributos de la clase Usuario están protegidos por el método __init__
        self.id_usuario = id_usuario  # Atributo encapsulado
        self.nombre_usuario = nombre_usuario  # Atributo encapsulado
        self.correo_usuario = correo_usuario  # Atributo encapsulado
        self.telefono_usuario = telefono_usuario  # Atributo encapsulado
        self.rut_usuario = rut_usuario  # Atributo encapsulado
        self.habilitado = habilitado  # Atributo encapsulado
        self.fecha_creacion = fecha_creacion  # Atributo encapsulado
    
    def validar_rut(self):
        """Valida el RUT utilizando la función del módulo rut_chile."""
        return rut_chile.is_valid_rut(self.rut_usuario)  # Uso de un método externo para validación
    
    def validar_correo(self):
        """Valida el correo electrónico usando una expresión regular."""
        regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'  # Expresión regular para validación
        return re.fullmatch(regex, self.correo_usuario) is not None  # Valida el correo utilizando la expresión regular

